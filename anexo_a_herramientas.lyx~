#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble

\end_preamble
\use_default_options true
\master maestro-pfg.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Índice
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
appendixname}{Anexo}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Tecnologías-y-herramientas"

\end_inset

Tecnologías y herramientas empleadas
\end_layout

\begin_layout Standard
Este anexo se utilizará para ampliar información acerca de las distintas
 tecnologías, formatos y herramientas mencionadas a lo largo del documento
 y que han sido empleadas en este proyecto.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:MusicXML"

\end_inset

MusicXML
\end_layout

\begin_layout Standard
MusicXML es un formato abierto de notación musical basado en XML, cuya extensión
 es .musicxml.
 Fue diseñado de cero para compartir archivos de partituras entre aplicaciones
 y para guardar archivos de partituras para su uso en el futuro.
 Sus archivos son legibles y utilizables por una amplia gama de aplicaciones
 e notación musical ahora y en el futuro.
 MusicXML complementa los formatos de archivo nativos utilizados por Finale
 y otros programas, que están diseñados para un uso rápido e interactivo.
 Así como los archivos MP3 se han convertido en sinónimo de compartir música
 grabada, los archivos MusicXML se han convertido en el estándar para compartir
 partituras interactivas.
 Con MusicXML se puede crear música en un programa y compartir sus resultados,
 de ida y vuelta, con personas que utilizan otros programas.
 Hoy en día más de 250 aplicaciones incluyen compatibilidad con este formato.
 
\begin_inset CommandInset citation
LatexCommand cite
key "good2001musicxml"
literal "false"

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

En el fragmento de código 
\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:ejemplo-musicxml"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se puede ver un ejemplo muy simple de un fichero .musicxml.
 Este fichero vendría a ser un 
\begin_inset Quotes eld
\end_inset

hola mundo
\begin_inset Quotes erd
\end_inset

 que representa en 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:anexo-a-resultado-musicxml"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Como se puede comprobar examinando el ejemplo, parámetros como el tono (pitch),
 no se da como la frecuencia numérica de ese sonido, sino como la posición
 que ocupa en un pentagrama musical, y su sonido final estará sujeto a esa
 posición y a otras variables, como la clave del pentagrama y las alteraciones.
 Este es el motivo de haber elegido optado por MusicXML en lugar de archivos
 MIDI o librerías basadas en este formato como JFugue.
 Por poner un ejemplo, en una obra musical, dos figuras pueden tener la
 misma frecuencia pero escribirse de diferentes formas en una partitura.
 A la hora de interpretar esa partitura, el sonido va a ser el mismo esté
 escrito de una forma o de otra, sin embargo es posible que esa figura cumpla
 funciones distintas dependiendo de cómo está escrita, por lo que al especificar
 únicamente su tono se está omitiendo información.
 Lo mismo puede ocurrir con la duración.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

El término MIDI (abreviatura de Musical Instrument Digital Interface), describe
 una interfaz que conecta una variedad de instrumentos digitalizados, computador
as y dispositivos de audio para reproducir, editar y grabar música.
 MIDI contiene las instrucciones que le dicen a los dispositivos electrónicos
 los parámetros de las notas, es decir, qué, dónde y cuándo deben ocurrir.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Por poner un símil con la programación, un fichero .musicxml correspondería
 al código fuente.
 Puede tener comentarios y código ordenado de una forma concreta que facilita
 la lectura para el programador.
 Por otro lado, un .midi u otro archivo de audio sería un archivo compilado
 que optimiza este código para su ejecución.
 Funcionalmente son equivalentes, pero la forma puede ser muy distinta.
 En el caso de una partitura musical destinada para ser leída por un músico,
 la forma cobra especial importancia.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=Java,float=p,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

    <? xml version = "1.0" encoding = "UTF-8" standalone = "no"?>
\end_layout

\begin_layout Plain Layout

	<! DOCTYPE score-partwise PUBLIC     
\end_layout

\begin_layout Plain Layout

		"- // Recordare // DTD MusicXML 4.0 Partwise // EN"     
\end_layout

\begin_layout Plain Layout

		"http://www.musicxml.org/dtds/partwise.dtd"> 
\end_layout

\begin_layout Plain Layout

	<score-partwise version = "4.0">
\end_layout

\begin_layout Plain Layout

		<part-list>     
\end_layout

\begin_layout Plain Layout

			<score-part id="P1">       
\end_layout

\begin_layout Plain Layout

				<part-name>Music</part-name>     
\end_layout

\begin_layout Plain Layout

			</score-part>   
\end_layout

\begin_layout Plain Layout

		</part-list>
\end_layout

\begin_layout Plain Layout

		<part id="P1">     
\end_layout

\begin_layout Plain Layout

			<measure number="1">       
\end_layout

\begin_layout Plain Layout

				<attributes>         
\end_layout

\begin_layout Plain Layout

					<divisions>1</divisions>         
\end_layout

\begin_layout Plain Layout

					<key>           
\end_layout

\begin_layout Plain Layout

						<fifths>0</fifths>         
\end_layout

\begin_layout Plain Layout

					</key>         
\end_layout

\begin_layout Plain Layout

					<time>           
\end_layout

\begin_layout Plain Layout

						<beats>4</beats>           
\end_layout

\begin_layout Plain Layout

						<beat-type>4</beat-type>         
\end_layout

\begin_layout Plain Layout

					</time>         
\end_layout

\begin_layout Plain Layout

					<clef>           
\end_layout

\begin_layout Plain Layout

						<sign>G</sign>           
\end_layout

\begin_layout Plain Layout

						<line>2</line>         
\end_layout

\begin_layout Plain Layout

					</clef>       
\end_layout

\begin_layout Plain Layout

				</attributes>       
\end_layout

\begin_layout Plain Layout

				<note>         
\end_layout

\begin_layout Plain Layout

					<pitch>           
\end_layout

\begin_layout Plain Layout

						<step>C</step>           
\end_layout

\begin_layout Plain Layout

						<octave>4</octave>         
\end_layout

\begin_layout Plain Layout

					</pitch>         
\end_layout

\begin_layout Plain Layout

					<duration>4</duration>         
\end_layout

\begin_layout Plain Layout

					<type>whole</type>       
\end_layout

\begin_layout Plain Layout

				</note>     
\end_layout

\begin_layout Plain Layout

			</measure>   
\end_layout

\begin_layout Plain Layout

		</part>
\end_layout

\begin_layout Plain Layout

	</score-partwise>
\end_layout

\begin_layout Plain Layout

	
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:ejemplo-musicxml"

\end_inset

Ejemplo fragmento musicxml
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/Anexo A/musicxml/hello-world.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:anexo-a-resultado-musicxml"

\end_inset

Resultado del ejemplo MusicXML
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Docker"

\end_inset

Docker
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Spring-Boot"

\end_inset

Spring Boot
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:AngularJS"

\end_inset

AngularJS
\end_layout

\begin_layout Standard
Angular (o AngularJS) fue desarrollado en javascript por empleados de Google
 en el año 2008.
 En aquella época, el desarrollo web se basaba en múltiples páginas de manera
 que cuando un usuario hacía click en un link el navegador debía solicitar
 la página web requerida y recargar la página al completo.
 Dependiendo de la velocidad de conexión y la respuesta del servidor, esto
 podía suponer un lapso de tiempo notable hasta que el usuario disponga
 de la nueva página.
 Gradualmente, los equipos han ido aumentando su rendimiento general, por
 lo que esta lógica de la aplicación podría ejecutarse en el navegador.
 Esto condujo al acercamiento de las 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "SPA"
description "Single Page Application"
literal "false"

\end_inset

SPA (Single Page Application).
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Angular fue uno de los primeros marcos para el desarrollo de SPA.
 Era capaz de reemplazar librerías como jQuery ofreciendo a los desarrolladores
 funciones como enlace de datos bidireccional y la posibilidad de organizarse
 en módulos para importar scripts externos, y en una jerarquía de componentes
 que permite una alta reutilización.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Otra importante novedad fue la introducción de Typescript (comunmente abreviado
 como 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "TS"
description "TypeScript\\\\"
literal "false"

\end_inset

TS) a partir de Angular2.
 Consiste en un 
\begin_inset Quotes eld
\end_inset

sucesor
\begin_inset Quotes erd
\end_inset

 de JavaScript, un lenguaje basado en y un superconjunto de JavaScript al
 que se puede traducir en tiempo de compilación a la hora de construir un
 proyecto.
 Es un superconjunto de ECMAScript (ES)6 creado y mantenido por Microsoft.
 Cabe mencionar que tanto Typescript como Angular es open-source.
 Uno de los méritos de Typescript es la capacidad de hacer uso de característica
s avanzadas de ES6 como los bucles for...of, lambdas y decoradores, estos últimos
 jugando un papel muy importante.
 Otra novedad que introdujo Typescript es el tipado estático.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

En cuanto a la estructura de un proyecto, al igual que otros frameworks
 y como se ha mencionado, se basa en componentes.
 Esto significa que los componentes son los bloques principales con los
 que se construye una página.
 Cada bloque puede mostrar información y realizar acciones.
 La práctica recomendada es que cada componente cuente con sus tres propios
 archivos de código (un HTML para la plantilla, un CSS para el estilo y
 un TS para el control).
 Siguiendo esta práctica se garantiza una separación de responsabilidades
 y un orden de la estructura del proyecto y del código.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

A su vez, los componentes pueden contener otros componentes, es a lo que
 se refería anteriormente con jerarquía.
 La información puede fluir entre padre e hijo, componentes hermanos o incluso
 dos componentes no relacionados.
 Existe un componente especial llamado app-root que representa el componente
 de nivel más alto, padre de todos los demás y punto de entrada encargado
 de inicializar la aplicación.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/4-frontend/PFG-4 Frontend.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ejemplo jerarquía de componentes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la figura 4.3 se puede observar un ejemplo de esta jerarquía.
 Se puede apreciar que es posible (aunque no obligatorio) que cada componente
 tenga sus propios ficheros independientes siendo el archivo TS el principal
 e indispensable, ya que en él se especifica la ruta de los otros dos como
 se puede ver en el fragmento de código 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Ejemplo componente com1"
plural "false"
caps "false"
noprefix "false"

\end_inset

 en las líneas 5 y 6.
 También es posible declarar varios componentes en un mismo archivo .ts.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=Java,float=p,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Ejemplo componente com1"

\end_inset

Archivo com1.component.ts
\end_layout

\end_inset

import { Component } from '@angular/core'
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

@Component({
\end_layout

\begin_layout Plain Layout

	selector: 'com1'
\end_layout

\begin_layout Plain Layout

	templateUrl: './com1.component.html,
\end_layout

\begin_layout Plain Layout

	styleUrls: ['./comp1.component.css']
\end_layout

\begin_layout Plain Layout

})
\end_layout

\begin_layout Plain Layout

export class Comp1Component {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	constructor() {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mientras que en el archivo HTML de dicho componente se podría incluir a
 los componentes 'com1' y 'com2' por sus referencias de mismo nombre (ver
 fragmento de código)
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language=Java,float=p,numbers=left,basicstyle={\ttfamily},breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:com1.component.html"

\end_inset

Archivo com1.component.html
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<div>
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	<!-- Componente 2 -->
\end_layout

\begin_layout Plain Layout

	<com2></com2>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<!-- Componente 3 -->
\end_layout

\begin_layout Plain Layout

	<com3></com3>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Kafka"

\end_inset

Kafka
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Hibernate"

\end_inset

Hibernate
\end_layout

\end_body
\end_document
